// <auto-generated />
using System;
using ClinicasCRM.Api.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ClinicasCRM.Api.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250201222249_v1")]
    partial class v1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ClinicasCRM.Core.Models.Agendamento.Agendamento", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("ClienteId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DataAlteracao")
                        .HasColumnType("TIMESTAMP");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("TIMESTAMP");

                    b.Property<DateTime>("DiaAtendimento")
                        .HasColumnType("TIMESTAMP");

                    b.Property<int>("Duracao")
                        .HasColumnType("INTEGER");

                    b.Property<short>("EstaSalva")
                        .HasColumnType("SMALLINT");

                    b.Property<long>("ProcedimentoId")
                        .HasColumnType("bigint");

                    b.Property<string>("Profissional")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("SalaAtendimento")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("VARCHAR");

                    b.Property<short>("StatusAtendimento")
                        .HasColumnType("SMALLINT");

                    b.Property<string>("UsuarioAlteracao")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UsuarioCriacao")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("VARCHAR");

                    b.Property<long>("UsuarioId")
                        .HasColumnType("BIGINT");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.HasIndex("ProcedimentoId");

                    b.ToTable("Agendamentos", (string)null);
                });

            modelBuilder.Entity("ClinicasCRM.Core.Models.Avaliacao.AvaliacaoCorporal", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("AnotacoesTratamentoEscolhido")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("VARCHAR");

                    b.Property<long>("ClienteId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DataAlteracao")
                        .HasColumnType("TIMESTAMP");

                    b.Property<DateTime>("DataAvaliacao")
                        .HasColumnType("TIMESTAMP");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("TIMESTAMP");

                    b.Property<short>("EstaSalva")
                        .HasColumnType("SMALLINT");

                    b.Property<long>("MedidasId")
                        .HasColumnType("bigint");

                    b.Property<string>("Observacoes")
                        .HasMaxLength(500)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("PrincipaisQueixas")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("UsuarioAlteracao")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UsuarioCriacao")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("VARCHAR");

                    b.Property<long>("UsuarioId")
                        .HasColumnType("BIGINT");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.HasIndex("MedidasId");

                    b.ToTable("AvaliacoesCorporais", (string)null);
                });

            modelBuilder.Entity("ClinicasCRM.Core.Models.Avaliacao.AvaliacaoFacial", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<short>("AlteracoesPelosFaciais")
                        .HasColumnType("SMALLINT");

                    b.Property<short>("AlteracoesQueratinizacao")
                        .HasColumnType("SMALLINT");

                    b.Property<short>("ClassificacaoCutanea")
                        .HasColumnType("SMALLINT");

                    b.Property<short>("ClassificacaoEspessura")
                        .HasColumnType("SMALLINT");

                    b.Property<short>("ClassificacaoOleosidade")
                        .HasColumnType("SMALLINT");

                    b.Property<short>("ClassificacaoSensibilidade")
                        .HasColumnType("SMALLINT");

                    b.Property<long>("ClienteId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DataAlteracao")
                        .HasColumnType("TIMESTAMP");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("TIMESTAMP");

                    b.Property<short>("EstaSalva")
                        .HasColumnType("SMALLINT");

                    b.Property<short>("FormacoesComConteudoLiquido")
                        .HasColumnType("SMALLINT");

                    b.Property<short>("FormacoesSolidas")
                        .HasColumnType("SMALLINT");

                    b.Property<short>("LesoesDePele")
                        .HasColumnType("SMALLINT");

                    b.Property<string>("Observacoes")
                        .HasMaxLength(500)
                        .HasColumnType("VARCHAR");

                    b.Property<short>("PresencaManchasPigmentaresRelacionadasMelanina")
                        .HasColumnType("SMALLINT");

                    b.Property<short>("PresencasManchasAlteracaoVascular")
                        .HasColumnType("SMALLINT");

                    b.Property<string>("PrincipaisQueixas")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("VARCHAR");

                    b.Property<short>("SequelasOuCicatrizes")
                        .HasColumnType("SMALLINT");

                    b.Property<string>("UsuarioAlteracao")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UsuarioCriacao")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("VARCHAR");

                    b.Property<long>("UsuarioId")
                        .HasColumnType("BIGINT");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.ToTable("AvaliacoesFaciais", (string)null);
                });

            modelBuilder.Entity("ClinicasCRM.Core.Models.Consulta.AnamneseCorporal", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("AvaliacaoCorporalId")
                        .HasColumnType("bigint");

                    b.Property<long>("ClienteId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DataAlteracao")
                        .HasColumnType("TIMESTAMP");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("TIMESTAMP");

                    b.Property<short>("EstaSalva")
                        .HasColumnType("SMALLINT");

                    b.Property<string>("UsuarioAlteracao")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UsuarioCriacao")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("VARCHAR");

                    b.Property<long>("UsuarioId")
                        .HasColumnType("BIGINT");

                    b.HasKey("Id");

                    b.HasIndex("AvaliacaoCorporalId");

                    b.HasIndex("ClienteId");

                    b.ToTable("AnamnesesCorporais", (string)null);
                });

            modelBuilder.Entity("ClinicasCRM.Core.Models.Consulta.AnamneseFacial", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("AvaliacaoFacialId")
                        .HasColumnType("bigint");

                    b.Property<long>("ClienteId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DataAlteracao")
                        .HasColumnType("TIMESTAMP");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("TIMESTAMP");

                    b.Property<short>("EstaSalva")
                        .HasColumnType("SMALLINT");

                    b.Property<string>("UsuarioAlteracao")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UsuarioCriacao")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("VARCHAR");

                    b.Property<long>("UsuarioId")
                        .HasColumnType("BIGINT");

                    b.HasKey("Id");

                    b.HasIndex("AvaliacaoFacialId");

                    b.HasIndex("ClienteId");

                    b.ToTable("AnamnesesFaciais", (string)null);
                });

            modelBuilder.Entity("ClinicasCRM.Core.Models.Paciente.HabitosFemininos", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("AcidosUsados")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("VARCHAR");

                    b.Property<short>("AlimentacaoBalanceada")
                        .HasColumnType("SMALLINT");

                    b.Property<short>("CicloMenstrualRegular")
                        .HasColumnType("SMALLINT");

                    b.Property<long>("ClienteId")
                        .HasColumnType("bigint");

                    b.Property<short>("ConsomeBebidaAlcoolica")
                        .HasColumnType("SMALLINT");

                    b.Property<short>("ConsumoAlcool")
                        .HasColumnType("SMALLINT");

                    b.Property<DateTime?>("DataAlteracao")
                        .HasColumnType("TIMESTAMP");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("TIMESTAMP");

                    b.Property<short>("DiasAtividadeFisica")
                        .HasColumnType("SMALLINT");

                    b.Property<short>("EstaSalva")
                        .HasColumnType("SMALLINT");

                    b.Property<short>("Fumante")
                        .HasColumnType("SMALLINT");

                    b.Property<short>("Gestante")
                        .HasColumnType("SMALLINT");

                    b.Property<short>("IntestinoRegular")
                        .HasColumnType("SMALLINT");

                    b.Property<short>("Lactante")
                        .HasColumnType("SMALLINT");

                    b.Property<short>("PraticaAtividadesFisicas")
                        .HasColumnType("SMALLINT");

                    b.Property<short>("QuantosFilhos")
                        .HasColumnType("SMALLINT");

                    b.Property<short>("SonoRegular")
                        .HasColumnType("SMALLINT");

                    b.Property<short>("TemFilhos")
                        .HasColumnType("SMALLINT");

                    b.Property<short>("UsaProtetorSolarDiario")
                        .HasColumnType("SMALLINT");

                    b.Property<short>("UsoAcidosNaPele")
                        .HasColumnType("SMALLINT");

                    b.Property<short>("UsoAnticoncepcionalRegular")
                        .HasColumnType("SMALLINT");

                    b.Property<string>("UsuarioAlteracao")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UsuarioCriacao")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("VARCHAR");

                    b.Property<long>("UsuarioId")
                        .HasColumnType("BIGINT");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.ToTable("HabitosFemininos", (string)null);
                });

            modelBuilder.Entity("ClinicasCRM.Core.Models.Paciente.HabitosMasculinos", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("AcidosUsados")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("VARCHAR");

                    b.Property<short>("AlimentacaoBalanceada")
                        .HasColumnType("SMALLINT");

                    b.Property<long>("ClienteId")
                        .HasColumnType("bigint");

                    b.Property<short>("ConsomeBebidaAlcoolica")
                        .HasColumnType("SMALLINT");

                    b.Property<short>("ConsumoAlcool")
                        .HasColumnType("SMALLINT");

                    b.Property<DateTime?>("DataAlteracao")
                        .HasColumnType("TIMESTAMP");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("TIMESTAMP");

                    b.Property<short>("DiasAtividadeFisica")
                        .HasColumnType("SMALLINT");

                    b.Property<short>("EstaSalva")
                        .HasColumnType("SMALLINT");

                    b.Property<short>("Fumante")
                        .HasColumnType("SMALLINT");

                    b.Property<short>("IntestinoRegular")
                        .HasColumnType("SMALLINT");

                    b.Property<short>("PraticaAtividadesFisicas")
                        .HasColumnType("SMALLINT");

                    b.Property<short>("SonoRegular")
                        .HasColumnType("SMALLINT");

                    b.Property<short>("UsaProtetorSolarDiario")
                        .HasColumnType("SMALLINT");

                    b.Property<short>("UsoAcidosNaPele")
                        .HasColumnType("SMALLINT");

                    b.Property<string>("UsuarioAlteracao")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UsuarioCriacao")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("VARCHAR");

                    b.Property<long>("UsuarioId")
                        .HasColumnType("BIGINT");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.ToTable("HabitosMasculinos", (string)null);
                });

            modelBuilder.Entity("ClinicasCRM.Core.Models.Paciente.HistoricoPaciente", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Alergias")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<long>("ClienteId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DataAlteracao")
                        .HasColumnType("TIMESTAMP");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("TIMESTAMP");

                    b.Property<short>("Epilepsia")
                        .HasColumnType("SMALLINT");

                    b.Property<short>("EstaSalva")
                        .HasColumnType("SMALLINT");

                    b.Property<short>("FazTratamentoMedico")
                        .HasColumnType("SMALLINT");

                    b.Property<short>("Hipertensao")
                        .HasColumnType("SMALLINT");

                    b.Property<short>("Marcapasso")
                        .HasColumnType("SMALLINT");

                    b.Property<short>("ProblemaCardiaco")
                        .HasColumnType("SMALLINT");

                    b.Property<short>("ProtesesDentarias")
                        .HasColumnType("SMALLINT");

                    b.Property<short>("ProtesesMetalicas")
                        .HasColumnType("SMALLINT");

                    b.Property<string>("TratamentosAnteriores")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("TratamentosOncologicos")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("UsuarioAlteracao")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UsuarioCriacao")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("VARCHAR");

                    b.Property<long>("UsuarioId")
                        .HasColumnType("BIGINT");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.ToTable("HistoricoPacientes", (string)null);
                });

            modelBuilder.Entity("ClinicasCRM.Core.Models.Paciente.Medidas", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<float>("AbdomenSuperior")
                        .HasColumnType("REAL");

                    b.Property<float>("Altura")
                        .HasColumnType("REAL");

                    b.Property<float>("BracoDireito")
                        .HasColumnType("REAL");

                    b.Property<float>("BracoEsquerdo")
                        .HasColumnType("REAL");

                    b.Property<float>("Busto")
                        .HasColumnType("REAL");

                    b.Property<long>("ClienteId")
                        .HasColumnType("bigint");

                    b.Property<float>("CoxaDireita")
                        .HasColumnType("REAL");

                    b.Property<float>("CoxaEsquerda")
                        .HasColumnType("REAL");

                    b.Property<DateTime?>("DataAlteracao")
                        .HasColumnType("TIMESTAMP");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("TIMESTAMP");

                    b.Property<DateTime>("DataMedicao")
                        .HasColumnType("TIMESTAMP");

                    b.Property<short>("EstaSalva")
                        .HasColumnType("SMALLINT");

                    b.Property<float>("PanturrilhaDireita")
                        .HasColumnType("REAL");

                    b.Property<float>("PanturrilhaEsquerda")
                        .HasColumnType("REAL");

                    b.Property<float>("Peso")
                        .HasColumnType("REAL");

                    b.Property<float>("Quadril")
                        .HasColumnType("REAL");

                    b.Property<string>("UsuarioAlteracao")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UsuarioCriacao")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("VARCHAR");

                    b.Property<long>("UsuarioId")
                        .HasColumnType("BIGINT");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.ToTable("Medidas", (string)null);
                });

            modelBuilder.Entity("ClinicasCRM.Core.Models.Pessoa.PessoaFisica", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("VARCHAR");

                    b.Property<DateTime?>("DataAlteracao")
                        .HasColumnType("TIMESTAMP");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("TIMESTAMP");

                    b.Property<DateTime?>("DataNascimento")
                        .HasColumnType("DATE");

                    b.Property<string>("Email")
                        .HasMaxLength(80)
                        .HasColumnType("VARCHAR");

                    b.Property<long>("EnderecoId")
                        .HasColumnType("bigint");

                    b.Property<short>("EstaSalva")
                        .HasColumnType("SMALLINT");

                    b.Property<short>("Genero")
                        .HasColumnType("SMALLINT");

                    b.Property<string>("NomeCompleto")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Telefone")
                        .HasMaxLength(20)
                        .HasColumnType("VARCHAR");

                    b.Property<short>("TipoCadastro")
                        .HasColumnType("SMALLINT");

                    b.Property<string>("UsuarioAlteracao")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UsuarioCriacao")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("VARCHAR");

                    b.Property<long>("UsuarioId")
                        .HasColumnType("BIGINT");

                    b.HasKey("Id");

                    b.HasIndex("EnderecoId");

                    b.ToTable("PessoasFisicas", (string)null);
                });

            modelBuilder.Entity("ClinicasCRM.Core.Models.Pessoa.PessoaJuridica", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Cnpj")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("VARCHAR");

                    b.Property<DateTime?>("DataAlteracao")
                        .HasColumnType("TIMESTAMP");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("TIMESTAMP");

                    b.Property<string>("Email")
                        .HasMaxLength(80)
                        .HasColumnType("VARCHAR");

                    b.Property<long>("EnderecoId")
                        .HasColumnType("bigint");

                    b.Property<short>("EstaSalva")
                        .HasColumnType("SMALLINT");

                    b.Property<string>("InscricaoEstadual")
                        .HasMaxLength(20)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("InscricaoMunicipal")
                        .HasMaxLength(20)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("NomeFantasia")
                        .HasMaxLength(250)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("RazaoSocial")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Telefone")
                        .HasMaxLength(20)
                        .HasColumnType("VARCHAR");

                    b.Property<short>("TipoCadastro")
                        .HasColumnType("SMALLINT");

                    b.Property<string>("UsuarioAlteracao")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UsuarioCriacao")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("VARCHAR");

                    b.Property<long>("UsuarioId")
                        .HasColumnType("BIGINT");

                    b.HasKey("Id");

                    b.HasIndex("EnderecoId");

                    b.ToTable("PessoasJuridicas", (string)null);
                });

            modelBuilder.Entity("ClinicasCRM.Core.Models.Procedimento.Procedimento", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("ConsumoProdutos")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR");

                    b.Property<DateTime?>("DataAlteracao")
                        .HasColumnType("TIMESTAMP");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("TIMESTAMP");

                    b.Property<short>("Duracao")
                        .HasColumnType("SMALLINT");

                    b.Property<string>("EquipamentosUtilizados")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR");

                    b.Property<short>("EstaSalva")
                        .HasColumnType("SMALLINT");

                    b.Property<short>("FormaPagamento")
                        .HasColumnType("SMALLINT");

                    b.Property<string>("NomeProcedimento")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("VARCHAR");

                    b.Property<decimal>("Preco")
                        .HasColumnType("DECIMAL(10,4)");

                    b.Property<string>("UsuarioAlteracao")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UsuarioCriacao")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("VARCHAR");

                    b.Property<long>("UsuarioId")
                        .HasColumnType("BIGINT");

                    b.HasKey("Id");

                    b.ToTable("Procedimentos", (string)null);
                });

            modelBuilder.Entity("ClinicasCRM.Core.ValueObjects.Endereco", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Bairro")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Cep")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Cidade")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Complemento")
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR");

                    b.Property<DateTime?>("DataAlteracao")
                        .HasColumnType("TIMESTAMP");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("TIMESTAMP");

                    b.Property<short>("EstaSalva")
                        .HasColumnType("SMALLINT");

                    b.Property<string>("Logradouro")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Numero")
                        .HasMaxLength(10)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Uf")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("CHAR");

                    b.Property<string>("UsuarioAlteracao")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UsuarioCriacao")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("VARCHAR");

                    b.Property<long>("UsuarioId")
                        .HasColumnType("BIGINT");

                    b.HasKey("Id");

                    b.ToTable("Enderecos", (string)null);
                });

            modelBuilder.Entity("ClinicasCRM.Core.Models.Agendamento.Agendamento", b =>
                {
                    b.HasOne("ClinicasCRM.Core.Models.Pessoa.PessoaFisica", "Cliente")
                        .WithMany("Agendamentos")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClinicasCRM.Core.Models.Procedimento.Procedimento", "Procedimento")
                        .WithMany("Agendamentos")
                        .HasForeignKey("ProcedimentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cliente");

                    b.Navigation("Procedimento");
                });

            modelBuilder.Entity("ClinicasCRM.Core.Models.Avaliacao.AvaliacaoCorporal", b =>
                {
                    b.HasOne("ClinicasCRM.Core.Models.Pessoa.PessoaFisica", "Cliente")
                        .WithMany("AvaliaçõesCorporais")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClinicasCRM.Core.Models.Paciente.Medidas", "Medidas")
                        .WithMany("AvaliacoesCorporais")
                        .HasForeignKey("MedidasId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cliente");

                    b.Navigation("Medidas");
                });

            modelBuilder.Entity("ClinicasCRM.Core.Models.Avaliacao.AvaliacaoFacial", b =>
                {
                    b.HasOne("ClinicasCRM.Core.Models.Pessoa.PessoaFisica", "Cliente")
                        .WithMany("AvaliacaoFaciais")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cliente");
                });

            modelBuilder.Entity("ClinicasCRM.Core.Models.Consulta.AnamneseCorporal", b =>
                {
                    b.HasOne("ClinicasCRM.Core.Models.Avaliacao.AvaliacaoCorporal", "AvaliacaoCorporal")
                        .WithMany("AnamnesesCorporal")
                        .HasForeignKey("AvaliacaoCorporalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClinicasCRM.Core.Models.Pessoa.PessoaFisica", "Cliente")
                        .WithMany("AnamnesesCorporais")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AvaliacaoCorporal");

                    b.Navigation("Cliente");
                });

            modelBuilder.Entity("ClinicasCRM.Core.Models.Consulta.AnamneseFacial", b =>
                {
                    b.HasOne("ClinicasCRM.Core.Models.Avaliacao.AvaliacaoFacial", "AvaliacaoFacial")
                        .WithMany("AnamnesesFaciais")
                        .HasForeignKey("AvaliacaoFacialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClinicasCRM.Core.Models.Pessoa.PessoaFisica", "Cliente")
                        .WithMany("AnamneseFaciais")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AvaliacaoFacial");

                    b.Navigation("Cliente");
                });

            modelBuilder.Entity("ClinicasCRM.Core.Models.Paciente.HabitosFemininos", b =>
                {
                    b.HasOne("ClinicasCRM.Core.Models.Pessoa.PessoaFisica", "Cliente")
                        .WithMany("HabitosFemininos")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cliente");
                });

            modelBuilder.Entity("ClinicasCRM.Core.Models.Paciente.HabitosMasculinos", b =>
                {
                    b.HasOne("ClinicasCRM.Core.Models.Pessoa.PessoaFisica", "Cliente")
                        .WithMany("HabitosMasculinos")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cliente");
                });

            modelBuilder.Entity("ClinicasCRM.Core.Models.Paciente.HistoricoPaciente", b =>
                {
                    b.HasOne("ClinicasCRM.Core.Models.Pessoa.PessoaFisica", "Cliente")
                        .WithMany("Historicos")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cliente");
                });

            modelBuilder.Entity("ClinicasCRM.Core.Models.Paciente.Medidas", b =>
                {
                    b.HasOne("ClinicasCRM.Core.Models.Pessoa.PessoaFisica", "Cliente")
                        .WithMany("Medidas")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cliente");
                });

            modelBuilder.Entity("ClinicasCRM.Core.Models.Pessoa.PessoaFisica", b =>
                {
                    b.HasOne("ClinicasCRM.Core.ValueObjects.Endereco", "Endereco")
                        .WithMany("PessoasFisicas")
                        .HasForeignKey("EnderecoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Endereco");
                });

            modelBuilder.Entity("ClinicasCRM.Core.Models.Pessoa.PessoaJuridica", b =>
                {
                    b.HasOne("ClinicasCRM.Core.ValueObjects.Endereco", "Endereco")
                        .WithMany("PessoaJuridicas")
                        .HasForeignKey("EnderecoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Endereco");
                });

            modelBuilder.Entity("ClinicasCRM.Core.Models.Avaliacao.AvaliacaoCorporal", b =>
                {
                    b.Navigation("AnamnesesCorporal");
                });

            modelBuilder.Entity("ClinicasCRM.Core.Models.Avaliacao.AvaliacaoFacial", b =>
                {
                    b.Navigation("AnamnesesFaciais");
                });

            modelBuilder.Entity("ClinicasCRM.Core.Models.Paciente.Medidas", b =>
                {
                    b.Navigation("AvaliacoesCorporais");
                });

            modelBuilder.Entity("ClinicasCRM.Core.Models.Pessoa.PessoaFisica", b =>
                {
                    b.Navigation("Agendamentos");

                    b.Navigation("AnamneseFaciais");

                    b.Navigation("AnamnesesCorporais");

                    b.Navigation("AvaliacaoFaciais");

                    b.Navigation("AvaliaçõesCorporais");

                    b.Navigation("HabitosFemininos");

                    b.Navigation("HabitosMasculinos");

                    b.Navigation("Historicos");

                    b.Navigation("Medidas");
                });

            modelBuilder.Entity("ClinicasCRM.Core.Models.Procedimento.Procedimento", b =>
                {
                    b.Navigation("Agendamentos");
                });

            modelBuilder.Entity("ClinicasCRM.Core.ValueObjects.Endereco", b =>
                {
                    b.Navigation("PessoaJuridicas");

                    b.Navigation("PessoasFisicas");
                });
#pragma warning restore 612, 618
        }
    }
}
