// <auto-generated />
using System;
using ClinicasCRM.Api.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ClinicasCRM.Api.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250310235528_v4")]
    partial class v4
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ClinicasCRM.Core.Models.Appointment.Appointment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("AppoitmentDate")
                        .HasColumnType("DATE");

                    b.Property<short>("AppoitmentStatus")
                        .HasColumnType("SMALLINT");

                    b.Property<TimeSpan>("AppoitmentTime")
                        .HasColumnType("TIME WITHOUT TIME ZONE");

                    b.Property<long>("ClientId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("VARCHAR");

                    b.Property<short>("IsSaved")
                        .HasColumnType("SMALLINT");

                    b.Property<long>("ProcedureId")
                        .HasColumnType("bigint");

                    b.Property<string>("ProcedureRoom")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("VARCHAR");

                    b.Property<long>("ProfessionalId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TIMESTAMP");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("VARCHAR");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("ProcedureId");

                    b.HasIndex("ProfessionalId");

                    b.ToTable("Appointments", (string)null);
                });

            modelBuilder.Entity("ClinicasCRM.Core.Models.Consulation.BodyAnamnesis", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("AssessmentDate")
                        .HasColumnType("TIMESTAMP");

                    b.Property<string>("ChosenTreatmentNotes")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("VARCHAR");

                    b.Property<long>("ClientId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("VARCHAR");

                    b.Property<short>("IsSaved")
                        .HasColumnType("SMALLINT");

                    b.Property<string>("MainComplaints")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("VARCHAR");

                    b.Property<long>("MeasurementId")
                        .HasColumnType("bigint");

                    b.Property<long>("MeasurementsId")
                        .HasColumnType("bigint");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("VARCHAR");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TIMESTAMP");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("VARCHAR");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("MeasurementsId");

                    b.ToTable("BodyAnamnesis", (string)null);
                });

            modelBuilder.Entity("ClinicasCRM.Core.Models.Consulation.FacialAnamnesis", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("ClientId")
                        .HasColumnType("bigint");

                    b.Property<long>("ClienteId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("VARCHAR");

                    b.Property<short>("FacialHairAlterationsPresent")
                        .HasColumnType("SMALLINT");

                    b.Property<short>("IsSaved")
                        .HasColumnType("SMALLINT");

                    b.Property<short>("KeratinizationAlterationsPresent")
                        .HasColumnType("SMALLINT");

                    b.Property<short>("LiquidContentFormationsPresent")
                        .HasColumnType("SMALLINT");

                    b.Property<string>("MainComplaints")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("VARCHAR");

                    b.Property<short>("MelaninRelatedPigmentSpotsPresent")
                        .HasColumnType("SMALLINT");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("VARCHAR");

                    b.Property<short>("OilinessClassification")
                        .HasColumnType("SMALLINT");

                    b.Property<short>("SensitivityClassification")
                        .HasColumnType("SMALLINT");

                    b.Property<short>("SequelaeOrScarsPresent")
                        .HasColumnType("SMALLINT");

                    b.Property<short>("SkinClassification")
                        .HasColumnType("SMALLINT");

                    b.Property<short>("SkinLesionsPresent")
                        .HasColumnType("SMALLINT");

                    b.Property<short>("SkinThicknessClassification")
                        .HasColumnType("SMALLINT");

                    b.Property<short>("SolidFormationsPresent")
                        .HasColumnType("SMALLINT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TIMESTAMP");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("VARCHAR");

                    b.Property<short>("VascularAlterationSpotsPresent")
                        .HasColumnType("SMALLINT");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.ToTable("FacialAnamnesis", (string)null);
                });

            modelBuilder.Entity("ClinicasCRM.Core.Models.Patient.FemaleHabits", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("AcidsUsed")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("VARCHAR");

                    b.Property<short>("AlcoholConsumptionFrequency")
                        .HasColumnType("SMALLINT");

                    b.Property<short>("BalencedDiet")
                        .HasColumnType("SMALLINT");

                    b.Property<short>("Breastfeeding")
                        .HasColumnType("SMALLINT");

                    b.Property<long>("ClientId")
                        .HasColumnType("bigint");

                    b.Property<short>("ConsumesAlcoholicBeverage")
                        .HasColumnType("SMALLINT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("VARCHAR");

                    b.Property<short>("HasChildren")
                        .HasColumnType("SMALLINT");

                    b.Property<short>("IsSaved")
                        .HasColumnType("SMALLINT");

                    b.Property<short?>("NumberOfChildren")
                        .HasColumnType("SMALLINT");

                    b.Property<short>("PhysicalActivityDaysPerWeek")
                        .HasColumnType("SMALLINT");

                    b.Property<short>("PracticesPhysicalActivities")
                        .HasColumnType("SMALLINT");

                    b.Property<short>("Pregnant")
                        .HasColumnType("SMALLINT");

                    b.Property<short>("RegularBowels")
                        .HasColumnType("SMALLINT");

                    b.Property<short>("RegularContraceptiveUse")
                        .HasColumnType("SMALLINT");

                    b.Property<short>("RegularMenstrualCycle")
                        .HasColumnType("SMALLINT");

                    b.Property<short>("RegularSleep")
                        .HasColumnType("SMALLINT");

                    b.Property<short>("Smoker")
                        .HasColumnType("SMALLINT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TIMESTAMP");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("VARCHAR");

                    b.Property<short>("UseAcidOnSkin")
                        .HasColumnType("SMALLINT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("VARCHAR");

                    b.Property<short>("UsesDailySunscreen")
                        .HasColumnType("SMALLINT");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("FemaleHabits", (string)null);
                });

            modelBuilder.Entity("ClinicasCRM.Core.Models.Patient.MaleHabits", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("AcidsUsed")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("VARCHAR");

                    b.Property<short>("AlcoholConsumptionFrequency")
                        .HasColumnType("SMALLINT");

                    b.Property<short>("BalencedDiet")
                        .HasColumnType("SMALLINT");

                    b.Property<long>("ClientId")
                        .HasColumnType("bigint");

                    b.Property<long>("ClienteId")
                        .HasColumnType("bigint");

                    b.Property<short>("ConsumesAlcoholicBeverage")
                        .HasColumnType("SMALLINT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("VARCHAR");

                    b.Property<short>("IsSaved")
                        .HasColumnType("SMALLINT");

                    b.Property<short>("PhysicalActivityDaysPerWeek")
                        .HasColumnType("SMALLINT");

                    b.Property<short>("PracticesPhysicalActivities")
                        .HasColumnType("SMALLINT");

                    b.Property<short>("RegularBowels")
                        .HasColumnType("SMALLINT");

                    b.Property<short>("RegularSleep")
                        .HasColumnType("SMALLINT");

                    b.Property<short>("Smoker")
                        .HasColumnType("SMALLINT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TIMESTAMP");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("VARCHAR");

                    b.Property<short>("UseAcidOnSkin")
                        .HasColumnType("SMALLINT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("VARCHAR");

                    b.Property<short>("UsesDailySunscreen")
                        .HasColumnType("SMALLINT");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.ToTable("MaleHabits", (string)null);
                });

            modelBuilder.Entity("ClinicasCRM.Core.Models.Patient.Measurements", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<float>("Bust")
                        .HasColumnType("REAL");

                    b.Property<long>("ClientId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("VARCHAR");

                    b.Property<float>("Height")
                        .HasColumnType("REAL");

                    b.Property<float>("Hip")
                        .HasColumnType("REAL");

                    b.Property<short>("IsSaved")
                        .HasColumnType("SMALLINT");

                    b.Property<float>("LeftArm")
                        .HasColumnType("REAL");

                    b.Property<float>("LeftCalf")
                        .HasColumnType("REAL");

                    b.Property<float>("LeftThigh")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("MeasurementDate")
                        .HasColumnType("TIMESTAMP");

                    b.Property<float>("RightArm")
                        .HasColumnType("REAL");

                    b.Property<double>("RightCalf")
                        .HasColumnType("double precision");

                    b.Property<float>("RightThigh")
                        .HasColumnType("REAL");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TIMESTAMP");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("VARCHAR");

                    b.Property<float>("UpperAbdomen")
                        .HasColumnType("REAL");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("VARCHAR");

                    b.Property<float>("Weight")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("Measurements", (string)null);
                });

            modelBuilder.Entity("ClinicasCRM.Core.Models.Patient.PatientHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Allergies")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<long>("ClientId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("VARCHAR");

                    b.Property<short>("DentalProstheses")
                        .HasColumnType("SMALLINT");

                    b.Property<short>("Epilepsy")
                        .HasColumnType("SMALLINT");

                    b.Property<short>("HeartProblem")
                        .HasColumnType("SMALLINT");

                    b.Property<short>("Hypertension")
                        .HasColumnType("SMALLINT");

                    b.Property<short>("IsSaved")
                        .HasColumnType("SMALLINT");

                    b.Property<short>("MetalProstheses")
                        .HasColumnType("SMALLINT");

                    b.Property<string>("OncologicalTreatments")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<short>("Pacemaker")
                        .HasColumnType("SMALLINT");

                    b.Property<string>("PreviousTreatments")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("VARCHAR");

                    b.Property<short>("UnderMedicalTreatment")
                        .HasColumnType("SMALLINT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TIMESTAMP");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("VARCHAR");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("PatientHistories", (string)null);
                });

            modelBuilder.Entity("ClinicasCRM.Core.Models.Person.Individual", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("AddressId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("Birthdate")
                        .HasColumnType("DATE");

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("VARCHAR");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Email")
                        .HasMaxLength(80)
                        .HasColumnType("VARCHAR");

                    b.Property<long>("EnderecoId")
                        .HasColumnType("bigint");

                    b.Property<short>("Gender")
                        .HasColumnType("SMALLINT");

                    b.Property<short>("IsSaved")
                        .HasColumnType("SMALLINT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("VARCHAR");

                    b.Property<short>("RecordType")
                        .HasColumnType("SMALLINT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TIMESTAMP");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("VARCHAR");

                    b.HasKey("Id");

                    b.HasIndex("EnderecoId");

                    b.ToTable("Individuals", (string)null);
                });

            modelBuilder.Entity("ClinicasCRM.Core.Models.Person.LegalEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("AddressId")
                        .HasColumnType("bigint");

                    b.Property<string>("CityRegistration")
                        .HasMaxLength(20)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Cnpj")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("VARCHAR");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Email")
                        .HasMaxLength(80)
                        .HasColumnType("VARCHAR");

                    b.Property<long>("EnderecoId")
                        .HasColumnType("bigint");

                    b.Property<short>("IsSaved")
                        .HasColumnType("SMALLINT");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("VARCHAR");

                    b.Property<short>("RecordType")
                        .HasColumnType("SMALLINT");

                    b.Property<string>("StateRegistration")
                        .HasMaxLength(20)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("TradeName")
                        .HasMaxLength(250)
                        .HasColumnType("VARCHAR");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TIMESTAMP");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("VARCHAR");

                    b.HasKey("Id");

                    b.HasIndex("EnderecoId");

                    b.ToTable("LegalEntities", (string)null);
                });

            modelBuilder.Entity("ClinicasCRM.Core.Models.Person.Professional", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("AddressId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("DATE");

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("VARCHAR");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Email")
                        .HasMaxLength(80)
                        .HasColumnType("VARCHAR");

                    b.Property<short>("IsSaved")
                        .HasColumnType("SMALLINT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("ProfessionalCouncil")
                        .HasMaxLength(20)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("ProfessionalCouncilState")
                        .HasMaxLength(10)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("ProfessionalNumber")
                        .HasMaxLength(20)
                        .HasColumnType("VARCHAR");

                    b.Property<short>("RecordType")
                        .HasColumnType("SMALLINT");

                    b.Property<short>("Type")
                        .HasColumnType("SMALLINT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TIMESTAMP");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("VARCHAR");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("Professionals", (string)null);
                });

            modelBuilder.Entity("ClinicasCRM.Core.Models.Procedure.Procedure", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("ConsumedProducts")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("VARCHAR");

                    b.Property<short>("DurationInMinutes")
                        .HasColumnType("SMALLINT");

                    b.Property<string>("EquipmentUsed")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR");

                    b.Property<short>("IsSaved")
                        .HasColumnType("SMALLINT");

                    b.Property<short>("PaymentMethod")
                        .HasColumnType("SMALLINT");

                    b.Property<decimal>("Price")
                        .HasColumnType("DECIMAL(10,4)");

                    b.Property<string>("ProcedureName")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("VARCHAR");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TIMESTAMP");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("VARCHAR");

                    b.HasKey("Id");

                    b.ToTable("Procedures", (string)null);
                });

            modelBuilder.Entity("ClinicasCRM.Core.Models.Procedure.ProcedurePack", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<short>("Active")
                        .HasColumnType("SMALLINT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Description")
                        .HasMaxLength(800)
                        .HasColumnType("VARCHAR");

                    b.Property<short>("IsSaved")
                        .HasColumnType("SMALLINT");

                    b.Property<string>("PackName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR");

                    b.Property<decimal>("Price")
                        .HasColumnType("DECIMAL(12,4)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TIMESTAMP");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("VARCHAR");

                    b.HasKey("Id");

                    b.ToTable("ProcedurePacks", (string)null);
                });

            modelBuilder.Entity("ClinicasCRM.Core.Models.Procedure.ProcedurePackProcedure", b =>
                {
                    b.Property<long>("ProcedureId")
                        .HasColumnType("bigint");

                    b.Property<long>("ProcedurePackId")
                        .HasColumnType("bigint");

                    b.HasKey("ProcedureId", "ProcedurePackId");

                    b.HasIndex("ProcedurePackId");

                    b.ToTable("ProcedurePackProcedure", (string)null);
                });

            modelBuilder.Entity("ClinicasCRM.Core.ValueObjects.Address", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Complement")
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("VARCHAR");

                    b.Property<short>("IsSaved")
                        .HasColumnType("SMALLINT");

                    b.Property<string>("Neighborhood")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Number")
                        .HasMaxLength(10)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("CHAR");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("VARCHAR");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TIMESTAMP");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("VARCHAR");

                    b.HasKey("Id");

                    b.ToTable("Addresses", (string)null);
                });

            modelBuilder.Entity("ClinicasCRM.Core.Models.Appointment.Appointment", b =>
                {
                    b.HasOne("ClinicasCRM.Core.Models.Person.Individual", "Client")
                        .WithMany("Appointments")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClinicasCRM.Core.Models.Procedure.Procedure", "Procedure")
                        .WithMany("Appointments")
                        .HasForeignKey("ProcedureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClinicasCRM.Core.Models.Person.Professional", "Professional")
                        .WithMany("Appointments")
                        .HasForeignKey("ProfessionalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Procedure");

                    b.Navigation("Professional");
                });

            modelBuilder.Entity("ClinicasCRM.Core.Models.Consulation.BodyAnamnesis", b =>
                {
                    b.HasOne("ClinicasCRM.Core.Models.Person.Individual", "Client")
                        .WithMany("BodyAnamneses")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClinicasCRM.Core.Models.Patient.Measurements", "Measurement")
                        .WithMany("BodyAnamneses")
                        .HasForeignKey("MeasurementsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Measurement");
                });

            modelBuilder.Entity("ClinicasCRM.Core.Models.Consulation.FacialAnamnesis", b =>
                {
                    b.HasOne("ClinicasCRM.Core.Models.Person.Individual", "Client")
                        .WithMany("FacialAnamneses")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("ClinicasCRM.Core.Models.Patient.FemaleHabits", b =>
                {
                    b.HasOne("ClinicasCRM.Core.Models.Person.Individual", "Client")
                        .WithMany("FemaleHabits")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("ClinicasCRM.Core.Models.Patient.MaleHabits", b =>
                {
                    b.HasOne("ClinicasCRM.Core.Models.Person.Individual", "Client")
                        .WithMany("MaleHabits")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("ClinicasCRM.Core.Models.Patient.Measurements", b =>
                {
                    b.HasOne("ClinicasCRM.Core.Models.Person.Individual", "Client")
                        .WithMany("Measurements")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("ClinicasCRM.Core.Models.Patient.PatientHistory", b =>
                {
                    b.HasOne("ClinicasCRM.Core.Models.Person.Individual", "Client")
                        .WithMany("PatientHistories")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("ClinicasCRM.Core.Models.Person.Individual", b =>
                {
                    b.HasOne("ClinicasCRM.Core.ValueObjects.Address", "Address")
                        .WithMany("Individuals")
                        .HasForeignKey("EnderecoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("ClinicasCRM.Core.Models.Person.LegalEntity", b =>
                {
                    b.HasOne("ClinicasCRM.Core.ValueObjects.Address", "Address")
                        .WithMany("LegalEntities")
                        .HasForeignKey("EnderecoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("ClinicasCRM.Core.Models.Person.Professional", b =>
                {
                    b.HasOne("ClinicasCRM.Core.ValueObjects.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("ClinicasCRM.Core.Models.Procedure.ProcedurePackProcedure", b =>
                {
                    b.HasOne("ClinicasCRM.Core.Models.Procedure.Procedure", "Procedure")
                        .WithMany("ProcedurePackProcedures")
                        .HasForeignKey("ProcedureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClinicasCRM.Core.Models.Procedure.ProcedurePack", "ProcedurePack")
                        .WithMany("ProcedurePackProcedures")
                        .HasForeignKey("ProcedurePackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Procedure");

                    b.Navigation("ProcedurePack");
                });

            modelBuilder.Entity("ClinicasCRM.Core.Models.Patient.Measurements", b =>
                {
                    b.Navigation("BodyAnamneses");
                });

            modelBuilder.Entity("ClinicasCRM.Core.Models.Person.Individual", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("BodyAnamneses");

                    b.Navigation("FacialAnamneses");

                    b.Navigation("FemaleHabits");

                    b.Navigation("MaleHabits");

                    b.Navigation("Measurements");

                    b.Navigation("PatientHistories");
                });

            modelBuilder.Entity("ClinicasCRM.Core.Models.Person.Professional", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("ClinicasCRM.Core.Models.Procedure.Procedure", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("ProcedurePackProcedures");
                });

            modelBuilder.Entity("ClinicasCRM.Core.Models.Procedure.ProcedurePack", b =>
                {
                    b.Navigation("ProcedurePackProcedures");
                });

            modelBuilder.Entity("ClinicasCRM.Core.ValueObjects.Address", b =>
                {
                    b.Navigation("Individuals");

                    b.Navigation("LegalEntities");
                });
#pragma warning restore 612, 618
        }
    }
}
